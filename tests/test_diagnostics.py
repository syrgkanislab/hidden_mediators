import numpy as np
import pandas as pd
import pytest
import matplotlib.pyplot as plt
from .utilities import gen_kmenta_data, gen_iv_data
from ..diagnostics import IVDiagnostics


def test_ivreg_r_compatibility_kmenta():
    ''' Test that on the small KMenta dataset the results that we get
    for the non-robust F-test are the same as the results that are returned
    by the ivreg package in R:
    https://zeileis.github.io/ivreg/articles/Diagnostics-for-2SLS-Regression.html
    The numbers here have been generated by running the R package.
    '''
    Z, X, Y, _, _ = gen_kmenta_data()
    diag = IVDiagnostics(add_constant=True).fit(Z, X, Y)

    assert np.allclose(pd.read_csv("tests/data/cookd_kmenta_ivreg.csv").iloc[:, 1].values, diag.cookd_)
    assert np.allclose(pd.read_csv("tests/data/coefficients_kmenta_ivreg.csv").iloc[:, 1].values, diag.point_)
    assert np.allclose(pd.read_csv("tests/data/dfbeta_kmenta_ivreg.csv").iloc[:, 1:].values, diag.dfbeta_)
    assert np.allclose(pd.read_csv("tests/data/dffits_kmenta_ivreg.csv").iloc[:, 1].values, diag.dffits_)
    assert np.allclose(pd.read_csv("tests/data/hatvalues_default_kmenta_ivreg.csv").iloc[:, 1].values, diag.hatvalues2_)
    assert np.allclose(pd.read_csv("tests/data/hatvalues_kmenta_ivreg.csv").iloc[:, 1].values, diag.hatvalues4_)
    assert np.allclose(pd.read_csv("tests/data/hatvalues_kmenta_ivreg.csv").iloc[:, 2].values, diag.hatvalues2_)
    assert np.allclose(pd.read_csv("tests/data/residuals_kmenta_ivreg.csv").iloc[:, 1].values, diag.epsilon_)
    assert np.allclose(pd.read_csv("tests/data/rstudent_kmenta_ivreg.csv").iloc[:, 1].values, diag.rstudent_)
    assert np.allclose(pd.read_csv("tests/data/smi_kmenta_ivreg.csv").iloc[:, 1].values, diag.smi_)

    diag = IVDiagnostics(add_constant=True).fit(Z[:, 1], X[:, 1], Y.flatten())

    assert np.allclose(pd.read_csv("tests/data/cookd_1d_kmenta_ivreg.csv").iloc[:, 1].values, diag.cookd_)
    
    
    diag = IVDiagnostics(add_constant=False, has_constant=True)
    diag.fit(np.hstack([np.ones((Z.shape[0], 1)), Z[:, [1]]]),
             np.hstack([np.ones((X.shape[0], 1)), X[:, [1]]]), Y.flatten())

    assert np.allclose(pd.read_csv("tests/data/cookd_1d_kmenta_ivreg.csv").iloc[:, 1].values, diag.cookd_)


def test_exact_influence():
    ''' Test that the exact influence exactly matches the
    difference in coefficients if we delete the sample
    '''
    np.random.seed(123)
    for (px, pz) in [(1, 1), (1, 3), (3, 3)]:
        for pw in [0, 3]:
            n = 100
            Z, X, Y, _ = gen_iv_data(n, pz, px, pw, .2)
            diag = IVDiagnostics(add_constant=True).fit(Z, X, Y)
            for i in range(10):
                inds = np.arange(X.shape[0])
                inds = np.delete(inds, i)
                diag2 = IVDiagnostics(add_constant=True).fit(Z[inds], X[inds], Y[inds])
                assert np.allclose(diag.point_ - diag2.point_, diag.exact_influence_[i])

def test_exact_vs_asymptotic_influence():
    ''' Test that in large samples, the asymptotic influence
    is a good approximation to the exact influence
    '''
    np.random.seed(123)
    for (px, pz) in [(1, 1), (1, 3), (3, 3)]:
        for pw in [0, 3]:
            n = 10000
            Z, X, Y, _ = gen_iv_data(n, pz, px, pw, .2)
            diag = IVDiagnostics(add_constant=True).fit(Z, X, Y)
            assert np.allclose(diag.influence_, diag.exact_influence_, atol=1 / n**(.6))
            diag = IVDiagnostics(add_constant=False).fit(Z, X, Y)
            assert np.allclose(diag.influence_, diag.exact_influence_, atol=1 / n**(.6))

    px, pz, pw = 3, 3, 3
    n = 10000
    Z, X, Y, _ = gen_iv_data(n, pz, px, pw, .2)
    diag = IVDiagnostics(add_constant=True).fit(Z, X, Y)
    diag2 = IVDiagnostics(add_constant=False, use_exact_influence=False).fit(Z, X, Y)
    assert np.allclose(diag2.dfbeta_, diag2.influence_)
    assert np.allclose(diag.cookd_, diag2.cookd_, atol=1 / n**(.6))
    assert np.allclose(diag2.l2influence_,
                       np.linalg.norm(diag2.influence_, axis=1, ord=2))
    assert np.allclose(diag2.l2exact_influence_,
                       np.linalg.norm(diag2.exact_influence_, axis=1, ord=2))


def test_very_large_sample_sigma_approx():
    ''' Test that for a very large sample size we indeed
    use the ddof correct residual std as the deleted std
    for all samples. Since for large samples calculating
    the deleted std is too expensive.
    '''
    np.random.seed(123)
    pz, px, pw = 3, 3, 3
    n = 20000
    Z, X, Y, _ = gen_iv_data(n, pz, px, pw, .2)
    diag = IVDiagnostics(add_constant=True).fit(Z, X, Y)
    sigma = np.std(diag.epsilon_, ddof=X.shape[1] + 1)
    assert np.allclose(diag.smi_, sigma)
    diag = IVDiagnostics(add_constant=False).fit(Z, X, Y)
    sigma = np.std(diag.epsilon_, ddof=X.shape[1])
    assert np.allclose(diag.smi_, sigma)

def test_influence_plot():
    ''' Test that all input variants to influence plot run and
    all wrong input variants fail.
    '''
    Z, X, Y, _, _ = gen_kmenta_data()
    diag = IVDiagnostics(add_constant=True)

    with pytest.raises(AttributeError) as e_info:
        diag.influence_plot()

    diag = diag.fit(Z, X, Y)

    fig = diag.influence_plot(influence_measure='cook')
    assert fig.axes[1].get_ylabel() == "Cook's Distance"
    fig = diag.influence_plot(influence_measure='l2influence')
    assert fig.axes[1].get_ylabel() == '$\\ell_2$ Asymptotic Influence'
    fig = diag.influence_plot(influence_measure='l2exact_influence')
    assert fig.axes[1].get_ylabel() == '$\\ell_2$ Exact Influence'
    with pytest.raises(AttributeError) as e_info:
        diag.influence_plot(influence_measure='adsf')
    
    with pytest.raises(AttributeError) as e_info:
        diag.influence_plot(influence_measure='cook', hatvalues_type=0)
    
    for i in np.arange(1, 6):
        diag.influence_plot(hatvalues_type=i)
    
    diag.influence_plot(labels=np.arange(X.shape[0]))

    diag.influence_plot(npoints=10)
    
    _, ax = plt.subplots(nrows=2, ncols=2)
    diag.influence_plot(npoints=10, ax=ax[0,0])

def test_qqplot():
    ''' Test that qqplot runs
    '''
    Z, X, Y, _, _ = gen_kmenta_data()
    diag = IVDiagnostics(add_constant=True)
    
    with pytest.raises(AttributeError) as e_info:
        diag.influence_plot()

    diag = diag.fit(Z, X, Y)

    diag.qqplot()

def test_cookd_plot():
    ''' Test that cook histogram plot runs
    '''
    Z, X, Y, _, _ = gen_kmenta_data()
    diag = IVDiagnostics(add_constant=True)
    
    with pytest.raises(AttributeError) as e_info:
        diag.cookd_plot()

    diag = diag.fit(Z, X, Y)

    diag.cookd_plot()
    
    _, ax = plt.subplots(nrows=2, ncols=2)
    diag.cookd_plot(ax=ax[0, 0])

def test_l2influence_plot():
    ''' Test that cook histogram plot runs
    '''
    Z, X, Y, _, _ = gen_kmenta_data()
    diag = IVDiagnostics(add_constant=True)
    
    with pytest.raises(AttributeError) as e_info:
        diag.l2influence_plot()

    diag = diag.fit(Z, X, Y)

    diag.l2influence_plot()
    
    _, ax = plt.subplots(nrows=2, ncols=2)
    diag.l2influence_plot(ax=ax[0, 0])

def test_l2exact_influence_plot():
    ''' Test that cook histogram plot runs
    '''
    Z, X, Y, _, _ = gen_kmenta_data()
    diag = IVDiagnostics(add_constant=True)
    
    with pytest.raises(AttributeError) as e_info:
        diag.l2exact_influence_plot()

    diag = diag.fit(Z, X, Y)

    diag.l2exact_influence_plot()
    
    _, ax = plt.subplots(nrows=2, ncols=2)
    diag.l2exact_influence_plot(ax=ax[0, 0])

